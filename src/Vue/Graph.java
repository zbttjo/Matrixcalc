/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vue;

/**
 *
 * @author groupe 4
 */


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import  Model.Matrice;

import java.io.IOException;
//import javax.swing.*;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.JOptionPane;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import javax.swing.ImageIcon;
import static javax.swing.JFrame.EXIT_ON_CLOSE;

import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import Model.Matrice;



public class Graph extends javax.swing.JFrame {

    /**
     * Creates new form CalcFrame
     */

    int col1 = 2;
    int lig1 = 2;
    int col2 = 2;
    int lig2 = 2;
    
    
    


    public Graph() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        tabPane = new javax.swing.JTabbedPane();
        calcPane = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        acceuil = new javax.swing.JLabel();
        labelLig1 = new javax.swing.JLabel();
        labelCol1 = new javax.swing.JLabel();
        labelLig2 = new javax.swing.JLabel();
        labelCol2 = new javax.swing.JLabel();
        jSpinnerLig1 = new javax.swing.JSpinner();
        jSpinnerCol1 = new javax.swing.JSpinner();
        jSpinnerLig2 = new javax.swing.JSpinner();
        jSpinnerCol2 = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableModel1 = new DefaultTableModel(col1, lig1);
        tableModel2 = new DefaultTableModel(col2, lig2);
        jTable1 = new javax.swing.JTable(tableModel1);
//        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable(tableModel2);
//        jTable2 = new javax.swing.JTable();
        addBtn = new javax.swing.JButton();
        minBtn = new javax.swing.JButton();
        multiBtn = new javax.swing.JButton();
        detBtn1 = new javax.swing.JButton();
        invBtn1 = new javax.swing.JButton();
        transBtn1 = new javax.swing.JButton();
        scalBtn1 = new javax.swing.JButton();
        invBtn2 = new javax.swing.JButton();
        scalBtn2 = new javax.swing.JButton();
        transBtn2 = new javax.swing.JButton();
        detBtn2 = new javax.swing.JButton();
        noteDeCourBtn = new javax.swing.JButton();
        aProposPane = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();



        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MatrixCalc");
        setBackground(new java.awt.Color(204, 255, 255));
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        setForeground(new java.awt.Color(102, 255, 255));
        
        ImageIcon icone = new ImageIcon("matrice.jpg");
        JLabel image = new JLabel(icone);
        add(image);
        
        

        tabPane.setBackground(new java.awt.Color(204, 255, 255));
        tabPane.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 102, 102), 2, true));
        tabPane.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        tabPane.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tabPane.setName(""); // NOI18N

        acceuil.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        acceuil.setText("CALCULATRICE MATRICIELLE");
        acceuil.setName("Aceuil"); // NOI18N

        labelLig1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        labelLig1.setText("ligne");
        labelLig1.setName("ligne1"); // NOI18N

        labelCol1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        labelCol1.setText("colonne");
        labelCol1.setName("colonne1"); // NOI18N

        labelLig2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        labelLig2.setText("ligne");
        labelLig2.setName("ligne2"); // NOI18N

        labelCol2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        labelCol2.setText("colonne");
        labelCol2.setName("colonne2"); // NOI18N


//        jTable1 = new JTable(col1, lig1);

        jTable1.setName("matrice1"); // NOI18N
        jTable1.setTableHeader(null);
        jTable1.setToolTipText("apres le remplissage du tableau, cliquer sur n'importe quelle ligne pour confirmer");
        jScrollPane1.setViewportView(jTable1);
        //jTable1.setBackground(new java.awt.Color(100, 155, 255));
        jTable1.setBackground(Color.white);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );

//        jTable2 = new JTable(col2 , lig2);
        jTable2.setName("matrice2"); // NOI18N
        jTable2.setTableHeader(null);
        jTable2.setToolTipText("apres le remplissage du tableau, cliquer sur n'importe quelle ligne pour confirmer");
        jScrollPane3.setViewportView(jTable2);

        addBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        addBtn.setText("+");
        addBtn.setName("additionBtn"); // NOI18N
        addBtn.setToolTipText("addition des deux matrices");// bulle d aide
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        minBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        minBtn.setText("-");
        minBtn.setName("soustractionBtn"); // NOI18N
        minBtn.setToolTipText("soustraction des deux matrices");
        minBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minBtnActionPerformed(evt);
            }
        });

        multiBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        multiBtn.setText("*");
        multiBtn.setName("multiplicationBtn"); // NOI18N
        multiBtn.setToolTipText("multiplication des deux matrices");
        multiBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multiBtnActionPerformed(evt);
            }
        });

        detBtn1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        detBtn1.setText("det");
        detBtn1.setName("detBtn1"); // NOI18N
        detBtn1.setToolTipText("determinant de la matrices");
        detBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detBtn1ActionPerformed(evt);
            }
        });

        invBtn1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        invBtn1.setText("inverse");
        invBtn1.setName("inversBtn1"); // NOI18N
        invBtn1.setToolTipText("dinverse de la matrices");
        invBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invBtn1ActionPerformed(evt);
            }
        });

        transBtn1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        transBtn1.setText("transposee");
        transBtn1.setName("transposeBtn1"); // NOI18N
        transBtn1.setToolTipText("transposee de la matrices");
        transBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transBtn1ActionPerformed(evt);
            }
        });

        scalBtn1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        scalBtn1.setText("*  scalair");
        scalBtn1.setName("scalairBtn1"); // NOI18N
        scalBtn1.setToolTipText("multiplier la matrice par un scalaire");
        scalBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scalBtn1ActionPerformed(evt);
            }
        });

        invBtn2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        invBtn2.setText("inverse");
        invBtn2.setName("inversBtn2"); // NOI18N
        invBtn2.setToolTipText("dinverse de la matrices");
        invBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invBtn2ActionPerformed(evt);
            }
        });

        scalBtn2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        scalBtn2.setText("*  scalair");
        scalBtn2.setName("scalairBtn2"); // NOI18N
        scalBtn2.setToolTipText("multiplier la matrice par un scalaire");
        scalBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scalBtn2ActionPerformed(evt);
            }
        });

        transBtn2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        transBtn2.setText("transposee");
        transBtn2.setName("transposeBtn2"); // NOI18N
        transBtn2.setToolTipText("transposee de la matrices");
        transBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transBtn2ActionPerformed(evt);
            }
        });

        detBtn2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        detBtn2.setText("det");
        detBtn2.setName("detBtn2"); // NOI18N
        detBtn2.setToolTipText("determinant de la matrices");
        detBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detBtn2ActionPerformed(evt);
            }
        });

        noteDeCourBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        noteDeCourBtn.setText("notes de cours");
        noteDeCourBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noteDeCourBtnActionPerformed(evt);
            }
        });

        jSpinnerLig1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jSpinnerLig1.setModel(new javax.swing.SpinnerNumberModel(lig1, 1, null, 1));
        jSpinnerLig1.addChangeListener(new ChangeListener(){

            public void stateChanged(ChangeEvent e){
                lig1 = (int) jSpinnerLig1.getValue();
                tableModel1.setRowCount(lig1);

            }
        });

        jSpinnerCol1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jSpinnerCol1.setModel(new javax.swing.SpinnerNumberModel(col1, 1, null, 1));
        jSpinnerCol1.addChangeListener(new ChangeListener(){
            public void stateChanged(ChangeEvent e){
                col1 = (int) jSpinnerCol1.getValue();
                tableModel1.setColumnCount(col1);


            }
        });


        jSpinnerLig2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jSpinnerLig2.setModel(new javax.swing.SpinnerNumberModel(lig2, 1, null, 1));
        jSpinnerLig2.addChangeListener(new ChangeListener(){
            public void stateChanged(ChangeEvent e){
                lig2 = (int) jSpinnerLig2.getValue();
                tableModel2.setRowCount(lig2);

            }
        });

        jSpinnerCol2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jSpinnerCol2.setModel(new javax.swing.SpinnerNumberModel(col2, 1, null, 1));
        jSpinnerCol2.addChangeListener(new ChangeListener(){
            public void stateChanged(ChangeEvent e){
                col2 = (int) jSpinnerCol2.getValue();
                tableModel2.setColumnCount(col2);

            }
        });



        javax.swing.GroupLayout calcPaneLayout = new javax.swing.GroupLayout(calcPane);
        calcPane.setBackground(new java.awt.Color(160, 155, 150));
        calcPane.setLayout(calcPaneLayout);
        calcPaneLayout.setHorizontalGroup(
                calcPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(calcPaneLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(calcPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(calcPaneLayout.createSequentialGroup()
                                                .addGroup(calcPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(calcPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                .addComponent(acceuil)
                                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, calcPaneLayout.createSequentialGroup()
                                                                        .addGroup(calcPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                .addComponent(labelCol1)
                                                                                .addComponent(labelLig1))
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addGroup(calcPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                                .addComponent(jSpinnerLig1)
                                                                                .addComponent(jSpinnerCol1))))
                                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(26, 26, 26)
                                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(calcPaneLayout.createSequentialGroup()
                                                .addGroup(calcPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(invBtn1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(scalBtn1, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(calcPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(transBtn1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(detBtn1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGap(54, 54, 54)
                                                .addGroup(calcPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(multiBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGap(19, 19, 19)))
                                .addGroup(calcPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(calcPaneLayout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(minBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(calcPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(calcPaneLayout.createSequentialGroup()
                                                                .addGap(62, 62, 62)
                                                                .addGroup(calcPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(calcPaneLayout.createSequentialGroup()
                                                                                .addComponent(labelCol2)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                .addComponent(jSpinnerCol2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                        .addGroup(calcPaneLayout.createSequentialGroup()
                                                                                .addComponent(labelLig2)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                .addComponent(jSpinnerLig2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                                .addGap(88, 88, 88))
                                                        .addGroup(calcPaneLayout.createSequentialGroup()
                                                                .addGap(84, 84, 84)
                                                                .addGroup(calcPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                        .addGroup(calcPaneLayout.createSequentialGroup()
                                                                                .addComponent(scalBtn2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                                .addComponent(detBtn2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                                        .addGroup(calcPaneLayout.createSequentialGroup()
                                                                                .addComponent(invBtn2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                                .addComponent(transBtn2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                                .addContainerGap())))
                                        .addGroup(calcPaneLayout.createSequentialGroup()
                                                .addGap(37, 37, 37)
                                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, Short.MAX_VALUE))))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, calcPaneLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(noteDeCourBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(225, 225, 225))
        );
        calcPaneLayout.setVerticalGroup(
                calcPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(calcPaneLayout.createSequentialGroup()
                                .addGroup(calcPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(calcPaneLayout.createSequentialGroup()
                                                .addGroup(calcPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(calcPaneLayout.createSequentialGroup()
                                                                .addGap(24, 24, 24)
                                                                .addComponent(acceuil)
                                                                .addGap(31, 31, 31)
                                                                .addGroup(calcPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(labelLig1)
                                                                        .addComponent(jSpinnerLig1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addGap(28, 28, 28)
                                                                .addGroup(calcPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(labelCol1)
                                                                        .addComponent(jSpinnerCol1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                        .addGroup(calcPaneLayout.createSequentialGroup()
                                                                .addGap(70, 70, 70)
                                                                .addGroup(calcPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(labelLig2)
                                                                        .addComponent(jSpinnerLig2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addGap(23, 23, 23)
                                                                .addGroup(calcPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(labelCol2)
                                                                        .addComponent(jSpinnerCol2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                .addGap(22, 22, 22)
                                                .addGroup(calcPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(calcPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(calcPaneLayout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addGroup(calcPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(addBtn)
                                                        .addComponent(minBtn))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(multiBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(noteDeCourBtn)
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, calcPaneLayout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(calcPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, calcPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                .addComponent(invBtn1)
                                                                .addComponent(transBtn1))
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, calcPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                .addComponent(transBtn2)
                                                                .addComponent(invBtn2)))
                                                .addGroup(calcPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(calcPaneLayout.createSequentialGroup()
                                                                .addGap(7, 7, 7)
                                                                .addGroup(calcPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(scalBtn2)
                                                                        .addComponent(detBtn2)))
                                                        .addGroup(calcPaneLayout.createSequentialGroup()
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(calcPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(scalBtn1)
                                                                        .addComponent(detBtn1))))
                                                .addGap(47, 47, 47))))
        );

        tabPane.addTab("Calculatrice", calcPane);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText("cette application a pour but de calculer les differentes operation sur les matrices"
                + "\ntels que l'addition, la soustraction,la multiplication des deux matrices et la multiplication par un scalaire,"
                + "\nl'inverse, le determinant et la transposee."
                + "\n\nce programme est developpe par des etudiants du college de Rosemont sous le cadre"
                + "\nde projet d'integration en sciences informatiques pour la session d'hiver 2020,"
                + "\n et sous l'encadrement de Mme Wfaa Niar."
                + "\nAuteurs: \nYassin Ait Aider \nAdil \nSerenite \nClervil");
        jScrollPane4.setViewportView(jTextArea1);

        javax.swing.GroupLayout aProposPaneLayout = new javax.swing.GroupLayout(aProposPane);
        aProposPane.setLayout(aProposPaneLayout);
        aProposPaneLayout.setHorizontalGroup(
                aProposPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(aProposPaneLayout.createSequentialGroup()
                                .addGap(96, 96, 96)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 517, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(31, Short.MAX_VALUE))
        );
        aProposPaneLayout.setVerticalGroup(
                aProposPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(aProposPaneLayout.createSequentialGroup()
                                .addGap(75, 75, 75)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(90, Short.MAX_VALUE))
        );

        tabPane.addTab("A Propos", aProposPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(tabPane)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(tabPane)
                                .addContainerGap())
        );

        tabPane.getAccessibleContext().setAccessibleName("A Propos");

        pack();
    }// </editor-fold>


    /**
     * Contruction de la Matrice a partir du JTable
     * @param table creation du la Matrice
     * @return Matrice
     */
    private Matrice buildMatriceFromTable(JTable table) throws Exception
    {
        TableModel tableModel = table.getModel();
        int numRows = tableModel.getRowCount();
        int numCols = tableModel.getColumnCount();
        double[][] matriceData = new double[numRows][numCols];
        for (int row = 0; row < numRows; row++) {
            for (int col = 0; col < numCols; col++) {
                Object cellValue = tableModel.getValueAt(row, col);
                matriceData[row][col] = (double) Double.parseDouble(String.valueOf(cellValue));
            }
        }
        return new Matrice(matriceData);
    }

    /**
     * Addition des deux Matrices.
     * @param evt Action lorsqu'on clique sur le bouton
     */
    private void addBtnActionPerformed(java.awt.event.ActionEvent evt)
    {
        Matrice matrice1, matrice2, matrice3;
        try {
            matrice1 = buildMatriceFromTable(jTable1);
            matrice2 = buildMatriceFromTable(jTable2);
            matrice3 = matrice1.additionner(matrice2);
            // Create and show the frame with the result of the addition...
            JFrame frame = new JFrame("Resultat Addition");
            frame.setLayout(new BorderLayout());

	    frame.setSize(300,300);// j ai limiter la fenetre====================
	    //JPanel pAddSol = new JPanel(); // j ai creer un nouveau panel====================
	   
            DefaultTableModel tableModel = new DefaultTableModel(matrice3.numCols, matrice3.numRows);
            for (int row = 0; row < matrice3.numRows; row++) {
                for (int col = 0; col < matrice3.numCols; col++) {
                    tableModel.setValueAt(Double.toString(matrice3.data[row][col]), row, col);
                }
            }
            JTable table = new javax.swing.JTable(tableModel);
	    //table.setIntercellSpacing(2,2);// pour donner un espace entre les cellules===================
            JPanel pAddSol = new JPanel();

            pAddSol.add(table);// j ai modifier la ligne pour ajouter la table dans le panel===============
            pAddSol.setBackground(Color.blue);// pour la couleur du fond - c est provisoire- ===========
            pAddSol.setPreferredSize (new Dimension(300, 300));//pour donner des dimensions inferieurs a celles des fenetres=============
	    frame.add(pAddSol);//ajouter le panel a la fenetre======================


            frame.setLocationRelativeTo(null);
            frame.setVisible(true);

        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "au moins une cellule ne contient pas un nombre valide");
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    /**
     * Lien pour les notes de cours.
     * @param evt Action lorsqu'on clique sur le bouton
     */
    private void noteDeCourBtnActionPerformed(java.awt.event.ActionEvent evt) {
        try
        {
            java.awt.Desktop.getDesktop().browse(java.net.URI.create("https://www.unilim.fr/pages_perso/jean.debord/math/matrices/matrices.htm"));
        }
        catch (IOException e1){
            JOptionPane.showMessageDialog(null,e1.getMessage());
        }
    }
    /**
     * Inverse de la 1er Matrice.
     * @param evt Action lorsqu'on clique sur le bouton.
     */
    private void invBtn1ActionPerformed(java.awt.event.ActionEvent evt) {
        Matrice matrice1, matrice2, matrice3;
        try {
            matrice1 = buildMatriceFromTable(jTable1);
            matrice3 = matrice1.inverse();
            if ((matrice3.numCols>2 && matrice3.numRows>2)){
            JFrame frame = new JFrame("Resultat Inverse de la matrice 1");
            frame.setLayout(new BorderLayout());
            DefaultTableModel tableModel = new DefaultTableModel(matrice3.numCols, matrice3.numRows);
            for (int row = 0; row < matrice3.numRows; row++) {
                for (int col = 0; col < matrice3.numCols; col++) {
                    tableModel.setValueAt(Double.toString(matrice3.data[row][col]), row, col);
                }
            }
            
            JTable table = new javax.swing.JTable(tableModel);
            JPanel pAddSol = new JPanel();
            pAddSol.add(table);// j ai modifier la ligne pour ajouter la table dans le panel===============
            pAddSol.setBackground(Color.white);// pour la couleur du fond - c est provisoire- ===========
            pAddSol.setPreferredSize (new Dimension(300, 300));//pour donner des dimensions inferieurs a celles des fenetres=============
            frame.add(pAddSol);
            frame.setLocationRelativeTo(null);
            frame.setVisible(true);
            frame.setSize(300,300);}
            else { 
                JOptionPane.showMessageDialog(null, "le nombre de colonnes et de lignes doivent etre superieur a 2");
            }

        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Au moins une cellule ne contient pas un nombre valide ou sinon veuillez cliquer n'importe ou sur les deux tableaux");
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    /**
     * Multiplication de la matrice par un Scalaire.
     * @param evt Action lorsqu'on clique sur le bouton
     */
    private void scalBtn1ActionPerformed(java.awt.event.ActionEvent evt) {

        Matrice matrice1, matrice2, matrice3;
        try {
            double  scal = Double.parseDouble(JOptionPane.showInputDialog(null, "Entrez le scalaire"));
            matrice1 = buildMatriceFromTable(jTable1);
            matrice3 = matrice1.multiplicationScalaire(scal);
            JFrame frame = new JFrame("Resultat Multiplication Scalaire 1");
            frame.setLayout(new BorderLayout());
            DefaultTableModel tableModel = new DefaultTableModel(matrice3.numCols, matrice3.numRows);
            for (int row = 0; row < matrice3.numRows; row++) {
                for (int col = 0; col < matrice3.numCols; col++) {
                    tableModel.setValueAt(Double.toString(matrice3.data[row][col]), row, col);
                }
            }
            
            JTable table = new javax.swing.JTable(tableModel);
            JPanel pAddSol = new JPanel();
            pAddSol.add(table);// j ai modifier la ligne pour ajouter la table dans le panel===============
            pAddSol.setBackground(Color.white);// pour la couleur du fond - c est provisoire- ===========
            pAddSol.setPreferredSize (new Dimension(300, 300));//pour donner des dimensions inferieurs a celles des fenetres=============
            frame.add(pAddSol);
            frame.setLocationRelativeTo(null);
            frame.setVisible(true);
            frame.setSize(300,300);}


        
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Au moins une cellule ne contient pas un nombre valide ou sinon veuillez cliquer n'importe ou sur les deux tableaux");
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    /**
     * Transposition de la Matrice 1.
     * @param evt Action lorsqu'on clique sur le bouton
     */
    private void transBtn1ActionPerformed(java.awt.event.ActionEvent evt) {
        Matrice matrice1, matrice2, matrice3;
        try {
            matrice1 = buildMatriceFromTable(jTable1);
            matrice3 = matrice1.transpose();
            JFrame frame = new JFrame("Resultat transpose de la matrice 1");
            frame.setLayout(new BorderLayout());
            DefaultTableModel tableModel = new DefaultTableModel(matrice3.numCols, matrice3.numRows);
            for (int row = 0; row < matrice3.numRows; row++) {
                for (int col = 0; col < matrice3.numCols; col++) {
                    tableModel.setValueAt(Double.toString(matrice3.data[row][col]), row, col);
                }
            }
            JPanel pAddSol = new JPanel();
            JTable table = new javax.swing.JTable(tableModel);
            frame.add(table);
            frame.setLocationRelativeTo(null);
            frame.setVisible(true);
            frame.setSize(500,300);

        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Au moins une cellule ne contient pas un nombre valide ou sinon veuillez cliquer n'importe ou sur les deux tableaux");
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    /**
     * Calcul du determinant de la Matrice 1.
     * @param evt Action lorsqu'on clique sur le bouton
     */
    private void detBtn1ActionPerformed(java.awt.event.ActionEvent evt) {
        Matrice matrice1, matrice2, matrice3;
        double det;
        try {
            matrice1 = buildMatriceFromTable(jTable1);
            matrice3 = matrice1;
            det = matrice1.determinant();
            DefaultTableModel tableModel = new DefaultTableModel(matrice3.numCols, matrice3.numRows);
            JOptionPane.showMessageDialog(null, "Determinant = " + det);


        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Au moins une cellule ne contient pas un nombre valide ou sinon veuillez cliquer n'importe ou sur les deux tableaux");
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    /**
     * Soustraction des deux Matrice.
     * @param evt Action lorsqu'on clique sur le bouton
     */
    private void minBtnActionPerformed(java.awt.event.ActionEvent evt) {
        Matrice matrice1, matrice2, matrice3;
        try {
            matrice1 = buildMatriceFromTable(jTable1);
            matrice2 = buildMatriceFromTable(jTable2);
            matrice3 = matrice1.soustraction(matrice2);
            JFrame frame = new JFrame("Resultat Soustraction");
            frame.setLayout(new BorderLayout());
            DefaultTableModel tableModel = new DefaultTableModel(matrice3.numCols, matrice3.numRows);
            for (int row = 0; row < matrice3.numRows; row++) {
                for (int col = 0; col < matrice3.numCols; col++) {
                    tableModel.setValueAt(Double.toString(matrice3.data[row][col]), row, col);
                }
            }
            JTable table = new javax.swing.JTable(tableModel);
            JPanel pAddSol = new JPanel();
            pAddSol.add(table);// j ai modifier la ligne pour ajouter la table dans le panel===============
            pAddSol.setBackground(Color.white);// pour la couleur du fond - c est provisoire- ===========
            pAddSol.setPreferredSize (new Dimension(300, 300));//pour donner des dimensions inferieurs a celles des fenetres=============
            frame.add(pAddSol);
            frame.setLocationRelativeTo(null);
            frame.setVisible(true);
            frame.setSize(300,300);

        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Au moins une cellule ne contient pas un nombre valide ou sinon veuillez cliquer n'importe ou sur les deux tableaux");
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    /**
     * Multiplication des deux Matrices.
     * @param evt Action lorsqu'on clique sur le bouton
     */
    private void multiBtnActionPerformed(java.awt.event.ActionEvent evt) {
        Matrice matrice1, matrice2, matrice3;
        try {
            matrice1 = buildMatriceFromTable(jTable1);
            matrice2 = buildMatriceFromTable(jTable2);
            matrice3 = matrice1.multiplication(matrice2);
            JFrame frame = new JFrame("Resultat Multiplication");
            frame.setLayout(new BorderLayout());
            DefaultTableModel tableModel = new DefaultTableModel(matrice3.numCols, matrice3.numRows);
            for (int row = 0; row < matrice3.numRows; row++) {
                for (int col = 0; col < matrice3.numCols; col++) {
                    tableModel.setValueAt(Double.toString(matrice3.data[row][col]), row, col);
                }
            }
            JTable table = new javax.swing.JTable(tableModel);
            JPanel pAddSol = new JPanel();
            pAddSol.add(table);// j ai modifier la ligne pour ajouter la table dans le panel===============
            pAddSol.setBackground(Color.white);// pour la couleur du fond - c est provisoire- ===========
            pAddSol.setPreferredSize (new Dimension(300, 300));//pour donner des dimensions inferieurs a celles des fenetres=============
            frame.add(pAddSol);
            frame.setLocationRelativeTo(null);
            frame.setVisible(true);
            frame.setSize(300,300);

        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Au moins une cellule ne contient pas un nombre valide ou sinon veuillez cliquer n'importe ou sur les deux tableaux");
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    /**
     * Calcul de l'inverse de la Matrice 2.
     * @param evt Action lorsqu'on clique sur le bouton
     */
    private void invBtn2ActionPerformed(java.awt.event.ActionEvent evt) {
        Matrice matrice1, matrice2, matrice3;
        try {
            matrice2 = buildMatriceFromTable(jTable2);
            matrice3 = matrice2.inverse();
            if ((matrice3.numCols>2 && matrice3.numRows>2)){
            JFrame frame = new JFrame("Resultat Inverse de la matrice 2");
            frame.setLayout(new BorderLayout());
            DefaultTableModel tableModel = new DefaultTableModel(matrice3.numCols, matrice3.numRows);
            for (int row = 0; row < matrice3.numRows; row++) {
                for (int col = 0; col < matrice3.numCols; col++) {
                    tableModel.setValueAt(Double.toString(matrice3.data[row][col]), row, col);
                }
            }
            JTable table = new javax.swing.JTable(tableModel);
            JPanel pAddSol = new JPanel();
            pAddSol.add(table);// j ai modifier la ligne pour ajouter la table dans le panel===============
            pAddSol.setBackground(Color.white);// pour la couleur du fond - c est provisoire- ===========
            pAddSol.setPreferredSize (new Dimension(300, 300));//pour donner des dimensions inferieurs a celles des fenetres=============
            frame.add(pAddSol);
            frame.setLocationRelativeTo(null);
            frame.setVisible(true);
            frame.setSize(300,300);}
            else { 
                JOptionPane.showMessageDialog(null, "le nombre de colonnes et de lignes doivent etre superieur a 2");
            }

        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Au moins une cellule ne contient pas un nombre valide ou sinon veuillez cliquer n'importe ou sur les deux tableaux");
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    /**
     * Transposee de la Matrice 2.
     * @param evt Action lorsqu'on clique sur le bouton
     */
    private void transBtn2ActionPerformed(java.awt.event.ActionEvent evt) {
        Matrice matrice1, matrice2, matrice3;
        try {
            matrice1 = buildMatriceFromTable(jTable2);
            matrice3 = matrice1.transpose();
            JFrame frame = new JFrame("Resultat Transpose de la matrice 2");
            frame.setLayout(new BorderLayout());
            DefaultTableModel tableModel = new DefaultTableModel(matrice3.numCols, matrice3.numRows);
            for (int row = 0; row < matrice3.numRows; row++) {
                for (int col = 0; col < matrice3.numCols; col++) {
                    tableModel.setValueAt(Double.toString(matrice3.data[row][col]), row, col);
                }
            }
            JTable table = new javax.swing.JTable(tableModel);
            JPanel pAddSol = new JPanel();
            pAddSol.add(table);// j ai modifier la ligne pour ajouter la table dans le panel===============
            pAddSol.setBackground(Color.white);// pour la couleur du fond - c est provisoire- ===========
            pAddSol.setPreferredSize (new Dimension(300, 300));//pour donner des dimensions inferieurs a celles des fenetres=============
            frame.add(pAddSol);
            frame.setLocationRelativeTo(null);
            frame.setVisible(true);
            frame.setSize(300,300);

        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Au moins une cellule ne contient pas un nombre valide ou sinon veuillez cliquer n'importe ou sur les deux tableaux");
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    /**
     * Multiplication de la matrice par un Scalaire pour la Matrice 2.
     * @param evt Action lorsqu'on clique sur le bouton
     */
    private void scalBtn2ActionPerformed(java.awt.event.ActionEvent evt) {
        Matrice matrice1, matrice2, matrice3;
        try {
            double  scal = Double.parseDouble(JOptionPane.showInputDialog(null, "Entrez le scalaire"));
            matrice1 = buildMatriceFromTable(jTable2);
            matrice3 = matrice1.multiplicationScalaire(scal);
            JFrame frame = new JFrame("Resultat Multiplication Scalaire 2");
            frame.setLayout(new BorderLayout());
            DefaultTableModel tableModel = new DefaultTableModel(matrice3.numCols, matrice3.numRows);
            for (int row = 0; row < matrice3.numRows; row++) {
                for (int col = 0; col < matrice3.numCols; col++) {
                    tableModel.setValueAt(Double.toString(matrice3.data[row][col]), row, col);
                }
            }
            
            JTable table = new javax.swing.JTable(tableModel);
            JPanel pAddSol = new JPanel();
            table.setBackground(new java.awt.Color(0, 5, 255));
            pAddSol.add(table);// j ai modifier la ligne pour ajouter la table dans le panel===============
            pAddSol.setBackground(new java.awt.Color(150, 155, 255));// pour la couleur du fond - c est provisoire- ===========
            pAddSol.setPreferredSize (new Dimension(300, 300));//pour donner des dimensions inferieurs a celles des fenetres=============
            frame.add(pAddSol);
            frame.setLocationRelativeTo(null);
            frame.setVisible(true);
            frame.setSize(300,300);}


        
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Au moins une cellule ne contient pas un nombre valide ou sinon veuillez cliquer n'importe ou sur les deux tableaux");
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    /**
     * Calcul du determinant pour la Matrice 2.
     * @param evt Action lorsqu'on clique sur le bouton
     
     */
    private void detBtn2ActionPerformed(java.awt.event.ActionEvent evt) {
        Matrice matrice1, matrice2, matrice3;
        double det;
        try {
            matrice2 = buildMatriceFromTable(jTable2);
            matrice3 = matrice2;
            det = matrice2.determinant();
            DefaultTableModel tableModel = new DefaultTableModel(matrice3.numCols, matrice3.numRows);
            JOptionPane.showMessageDialog(null, "Determinant = " + det);


        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Au moins une cellule ne contient pas un nombre valide ou sinon veuillez cliquer n'importe ou sur les deux tableaux");
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify
    private javax.swing.JPanel aProposPane;
    private javax.swing.JLabel acceuil;
    private javax.swing.JButton addBtn;
    private javax.swing.JPanel calcPane;
    private javax.swing.JButton detBtn1;
    private javax.swing.JButton detBtn2;
    private javax.swing.JButton invBtn1;
    private javax.swing.JButton invBtn2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSpinner jSpinnerCol1;
    private javax.swing.JSpinner jSpinnerCol2;
    private javax.swing.JSpinner jSpinnerLig1;
    private javax.swing.JSpinner jSpinnerLig2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel labelCol1;
    private javax.swing.JLabel labelCol2;
    private javax.swing.JLabel labelLig1;
    private javax.swing.JLabel labelLig2;
    private javax.swing.JButton minBtn;
    private javax.swing.JButton multiBtn;
    private javax.swing.JButton noteDeCourBtn;
    private javax.swing.JButton scalBtn1;
    private javax.swing.JButton scalBtn2;
    private javax.swing.JTabbedPane tabPane;
    private javax.swing.JButton transBtn1;
    private javax.swing.JButton transBtn2;

    private DefaultTableModel tableModel1;
    private DefaultTableModel tableModel2;

    // End of variables declaration
}


